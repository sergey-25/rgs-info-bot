const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const cron = require("node-cron");
const puppeteer = require("puppeteer");
const nodemailer = require("nodemailer");
const { config } = require('dotenv');
config();
const token = process.env.TELEGRAM_TOKEN;

let users = {};
let messageSentToday = false;

// Replace 'YOUR_TOKEN' with your actual bot token

const googleAppsScriptUrl =
  "https://script.google.com/macros/s/AKfycbyJS-0PLYOI4sWKZoSIksivuQHH7LkkFXwT5f4XDl8Wk7cAOuy7KdTvKc20pC8dvRF_pw/exec";
const googleAppsScriptTreck =
  "https://script.google.com/macros/s/AKfycbyJS-0PLYOI4sWKZoSIksivuQHH7LkkFXwT5f4XDl8Wk7cAOuy7KdTvKc20pC8dvRF_pw/exec";

// Create a new bot instance
const bot = new TelegramBot(token, { polling: true });
const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

const commands = [
  { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
  { command: "menu", description: "–ú–µ–Ω—é" },
];
bot.setMyCommands(commands);

const mainMenuKeyboard = [
  ["üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è", "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"],
  ["‚ÑπÔ∏è –ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"],
  ["‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"],
  ["‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é"],
];

const instructionsMenuKeyboard = [
  ["ü©∫üíª –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É –ª—ñ–∫–∞—Ä—è"],
  ["üßëüèª‚Äç‚öïÔ∏èüíª –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É –ø–∞—Ü—ñ—î–Ω—Ç–∞ –¥–æ –ø–∫"],
  ["üßëüèª‚Äç‚öïÔ∏èüì± –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ –¥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é"],
  ["‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"],
];

const infoMenuKeyboard = [
  ["‚öñÔ∏è –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ"],
  ["‚ñ∂Ô∏è Youtube –∫–∞–Ω–∞–ª"],
  ["‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"],
];

let chatId; // Define chatId variable outside the event listener

let isFetchingVideos = false; // Flag to indicate if videos are currently being fetched

async function fetchNewVideos() {
  try {
    // Check if videos are currently being fetched
    if (isFetchingVideos) {
      console.log("Videos are already being fetched. Skipping.");
      return [];
    }

    isFetchingVideos = true; // Set the flag to true to indicate that videos are being fetched

    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto("https://www.youtube.com/channel/UCkRDVvF3JtSTj-bUa6Jn9wA");

    const videoLinks = await page.$$eval("a#video-title", (links) =>
      links.map((link) => link.href)
    );
    const uploadDates = await page.$$eval(
      "div#metadata-line > span.style-scope.ytd-grid-video-renderer",
      (dates) => dates.map((date) => date.textContent)
    );
    console.log(uploadDates);
    await browser.close();

    // Check if uploadDates includes "—á–∞—Å–∞", "—á–∞—Å", or "—á–∞—Å–æ–≤"
    const hasHourUpload = uploadDates.some(
      (date) =>
        date.includes("—á–∞—Å–∞") || date.includes("—á–∞—Å") || date.includes("—á–∞—Å–æ–≤")
    );
    if (hasHourUpload) {
      // If uploadDates includes hour-related strings, send message with the first link from videoLinks
      if (videoLinks.length > 0) {
        const message = `New video uploaded:  ${videoLinks[0]}`;
        await bot.sendMessage(
          chatId,
          `–£ –Ω–∞—à–æ–º—É YouTube –∫–∞–Ω–∞–ª—ñ, RGS UKRAINE –¥–æ–¥–∞–Ω–µ –Ω–æ–≤–µ –≤—ñ–¥–µ–æ - ${videoLinks[0]}`
        );
        console.log(
          "Message sent for new video uploaded within the last hour."
        );
      } else {
        console.log("No video links available.");
      }
    } else {
      // Otherwise, process uploadDates normally
      const videosWithDates = videoLinks.map((link, index) => ({
        link,
        uploadDate: uploadDates[index],
      }));
      return videosWithDates;
    }
  } catch (error) {
    console.error("Error fetching new videos:", error);
    return [];
  } finally {
    // Reset the flag after fetching is complete or an error occurs
    isFetchingVideos = false;
  }
}

async function checkAndSendTodayVideos() {
  const videos = await fetchNewVideos();
}

const emailContent = {
  from: "rgs.info.ua@ukr.net",
  to: "", // This will be updated dynamically
  subject:
    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –≤—ñ–¥ —Ç–µ–ª–µ–º–µ–¥–∏—á–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ Rehabilitation Gaming System",
  html: `
    <h1>–î–æ–±—Ä–∏–π –¥–µ–Ω—å,</h1>
    <p>–ú–∏ —Ä–∞–¥—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞–º –Ω–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞ - <a href="https://t.me/rgs_support_bot">RGS_Support_bot</a>!</p>
    <p>–ù–∞—à –±–æ—Ç –Ω–∞–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—é —Ç–∞ —î –ø–æ–º—ñ—á–Ω–∏–∫–æ–º –¥–ª—è –í–∞—Å. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∏–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º <a href="https://t.me/rgs_support_bot">RGS_Support_bot</a>.</p>
    <p>–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –Ω–∞—Å, —è–∫—â–æ —É –≤–∞—Å —î —è–∫—ñ-–Ω–µ–±—É–¥—å –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –≤—ñ–¥–≥—É–∫–∏.</p>
    <p>–ó –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏,<br>Rehabilitation Gaming System</p>
    <p>–¢–∞–∫–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, —Å–∫–æ—Ä–∏—Å—Ç—É–≤–∞–≤—à–∏—Å—å QR –∫–æ–¥–æ–º</p>
    <img src="https://drive.google.com/uc?id=1w_KBXWV9LwAxukNbCIBzQhMToJQupF3L" alt="QR code">
    `,
};

const emailList = ["s.kurylenko.mail@gmail.com"]; // Replace with your actual email list

// Function to send emails
async function sendEmails() {
  try {
    // Set up Nodemailer transporter
    const transporter = nodemailer.createTransport({
      host: "smtp.ukr.net",
      port: 2525,
      secure: true, // true for 465, false for other ports
      auth: {
        user: "rgs.info.ua@ukr.net",
        pass: "rczVFGR208jytBOh",
      },
    });

    // Iterate over the email list
    for (const email of emailList) {
      // Update email content with recipient's email address
      emailContent.to = email;

      // Send email
      await transporter.sendMail(emailContent);

      console.log(`Email sent successfully to ${email}`);
    }
  } catch (error) {
    console.error("Error sending emails:", error);
  }
}

// 0 9 * * 1-5 */2 * * * * *
bot.on("text", async (msg) => {
  chatId = msg.chat.id;

  // cron.schedule("1 0 * * 1-5", async () => {
  //   const today = new Date();
  //   const dayOfWeek = today.getDay();

  //   if (dayOfWeek !== 0 && dayOfWeek !== 6 && !messageSentToday) {
  //     await bot.sendMessage(
  //       msg.chat.id,
  //       "–í—ñ—Ç–∞—î–º–æ —ñ –Ω–∞–≥–∞–¥—É—î–º–æ —è–∫—â–æ, —É –í–∞—Å –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ç—Ä—É–¥–Ω–æ—â—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ä–∏–º–∫–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É: +380634390602 —á–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é - rgs.info.ua@ukr.net –∞–±–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é —Å—Ç–≤–æ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è! –î—è–∫—É—î–º–æ —ñ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è."
  //     );
  //     await checkAndSendTodayVideos();
  //     messageSentToday = true; // Set the flag to true to indicate that a message has been sent today
  //   }
  // });
  // cron.schedule("59 23 * * 1-5", () => {
  //   messageSentToday = false;
  // });

  // console.log("Message received:", msg);

  try {
    switch (msg.text) {
      case "/start":
        await bot.sendChatAction(msg.chat.id, "typing");
        await sendStartMessage(msg);
        await checkId(msg);
        break;
      case "/start@rgs_support_bot":
        await bot.sendChatAction(msg.chat.id, "typing");
        await sendStartMessage(msg);
        break;
      case "/menu":
        await sendMainMenuMessage(msg);
        break;
        case "/menu@rgs_support_bot":
          await sendMainMenuMessage(msg);
          break;
      case "‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é":
        await closeMenu(msg);
        break;
      case "‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        await sendMainMenuMessage(msg);
        break;
      case "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—è":
        await bot.sendChatAction(msg.chat.id, "typing");
        await createTrainingRequest(msg);
        break;
      case "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏":
        await bot.sendChatAction(msg.chat.id, "typing");
        await sendSupportContact(msg);
        break;
      case "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó":
        await sendInstructionsMenu(msg);
        break;
      case "ü©∫üíª –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É –ª—ñ–∫–∞—Ä—è":
        await sendDocument(msg, "./files/Doctors_cabinet_instruction.pdf");
        break;
      case "üßëüèª‚Äç‚öïÔ∏èüíª –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–∞–±—ñ–Ω–µ—Ç—É –ø–∞—Ü—ñ—î–Ω—Ç–∞ –¥–æ –ø–∫":
        await sendDocument(msg, "./files/Patients_cabinet_web_manual.pdf");
        break;
      case "üßëüèª‚Äç‚öïÔ∏èüì± –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ –¥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é":
        await sendDocument(msg, "./files/Patients_mobile_app_manual.pdf");
        break;
      case "‚ÑπÔ∏è –ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        await sendInfoMenu(msg);
        break;
      case "‚öñÔ∏è –ó–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ":
        await bot.sendChatAction(msg.chat.id, "typing");
        await sendUsefulInfoMessage(msg);
        break;
      case "‚ñ∂Ô∏è Youtube –∫–∞–Ω–∞–ª":
        await bot.sendChatAction(msg.chat.id, "typing");
        await sendMessages(msg, "text");
        break;
      case "send mails":
        await sendEmails(msg);
      default:
        // await bot.sendMessage(msg.chat.id, 'fsdfs');
        break;
    }
  } catch (error) {
    console.log(error);
  }
});

async function checkId(msg) {
  let keyboard = [...mainMenuKeyboard];
  const yourChatId = 546357192; // Convert chat ID to a number

  // Check if the message is from your chat.id
  console.log("Message Chat ID:", msg.chat.id);
  console.log("Your Chat ID:", yourChatId);

  if (msg.chat.id === yourChatId) {
    console.log("Chat IDs match. Adding 'send mails' button.");
    // Add the menu item only if the chatId matches yourChatId
    keyboard.push(["send mails"]);
    await bot.sendMessage(msg.chat.id, `/menu`, {
      reply_markup: { keyboard: keyboard, resize_keyboard: true },
    });
  }

  if (!users[msg.chat.id]) {
    users[msg.chat.id] = {
      id: msg.chat.id,
      username: msg.from.username,
      firstName: msg.from.first_name,
      lastName: msg.from.last_name,
      // Add more properties as needed
    };

    console.log("New user added:", users[msg.chat.id]);
    await saveToGoogleSheetsUsers(msg, users[msg.chat.id]);
  }
  logUserInformation();
}

async function saveToGoogleSheetsUsers(msg, data) {
  const payload = { data: data };
  await bot.sendChatAction(msg.chat.id, "typing");
  try {
    // Send the user data to Google Sheets
    const response = await axios.post(googleAppsScriptTreck, payload);
    console.log("Data appended to Google Sheets:", response.data);

    // Send a confirmation message to the user
    // await bot.sendMessage(msg.chat.id, "Your data has been successfully saved to Google Sheets.");
  } catch (error) {
    console.error("Error appending data to Google Sheets:", error);
    // await bot.sendMessage(msg.chat.id, "Error saving data to Google Sheets.");
  }
}

function logUserInformation() {
  console.log("Total users:", Object.keys(users).length);
  console.log("User details:");
  for (const userId in users) {
    console.log(users[userId]);
  }
}

async function sendStartMessage(msg) {
  if (msg.text && msg.text.length > 6) {
    const refID = msg.text.slice(7);
    await bot.sendMessage(
      msg.chat.id,
      `–í–∏ –∑–∞—à–ª–∏ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${refID}`
    );
  }

  const startMessage = `–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ RGS. –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /menu`;

  // Check if the bot has the necessary permissions to send messages
  const botInfo = await bot.getMe();
  console.log(botInfo); // Check if the bot has permission to send messages

  await bot.sendMessage(msg.chat.id, startMessage, {
    reply_markup: {
      keyboard: [],
      resize_keyboard: true,
      one_time_keyboard: true, // Show keyboard once
      request_contact: true, // Request access to contact
    },
  });
}

async function sendMainMenuMessage(msg) {
  await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
    reply_markup: { keyboard: mainMenuKeyboard, resize_keyboard: true },
  });
}

async function closeMenu(msg) {
  await bot.sendMessage(msg.chat.id, "–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ", {
    reply_markup: { remove_keyboard: true },
  });
}

async function sendSupportContact(msg) {
  const contactInfo = `

    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +380634390602
    \n---------------------------------------

    üìß <b>Email:</b> rgs.info.ua@ukr.net
    `;

  await bot.sendMessage(msg.chat.id, contactInfo, { parse_mode: "HTML" });
}

async function sendInstructionsMenu(msg) {
  await bot.sendMessage(
    msg.chat.id,
    "–¢—É—Ç –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.",
    {
      reply_markup: {
        keyboard: instructionsMenuKeyboard,
        resize_keyboard: true,
      },
    }
  );
}

async function sendInfoMenu(msg) {
  await bot.sendMessage(
    msg.chat.id,
    "–¢—É—Ç –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.",
    {
      reply_markup: { keyboard: infoMenuKeyboard, resize_keyboard: true },
    }
  );
}

async function sendDocument(msg, path) {
  await bot.sendMessage(msg.chat.id, `–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...`);
  await bot.sendDocument(msg.chat.id, path);
}

async function sendMessages(msg, text) {
  const linkToYoutube = ` 
    <b>–¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –¥–ª—è –í–∞—Å –≤—ñ–¥–µ–æ</b>
    
    <a href="https://www.youtube.com/@serhii-qh4lw">Youtube –∫–∞–Ω–∞–ª RGS UKRAINE</a>`;
  await bot.sendMessage(msg.chat.id, linkToYoutube, { parse_mode: "HTML" });
}

async function sendUsefulInfoMessage(msg) {
  const infoMessage = `
  <b>–¢—É—Ç –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:</b>
 
  1. <a href="https://zakon.rada.gov.ua/laws/show/2801-12#Text">–û—Å–Ω–æ–≤–∏ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏ –ø—Ä–æ –æ—Ö–æ—Ä–æ–Ω—É –∑–¥–æ—Ä–æ–≤‚Äô—è, —Å—Ç. 35-6</a>
  
  2. <a href="https://moz.gov.ua/article/ministry-mandates/nakaz-moz-ukraini-vid-09062022--994-pro-provedennja-testovoi-ekspluatacii-telemedichnih-platform-sistem-v-umovah-voennogo-stanu-v-ukraini">–ù–∞–∫–∞–∑ –ú–û–ó –£–∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥ 09.06.2022 ‚Ññ 994 ¬´–ü—Ä–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó —Ç–µ–ª–µ–º–µ–¥–∏—á–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (—Å–∏—Å—Ç–µ–º) –≤ —É–º–æ–≤–∞—Ö –≤–æ—î–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≤ –£–∫—Ä–∞—ó–Ω—ñ¬ª</a>

  3. <a href="https://moz.gov.ua/article/ministry-mandates/nakaz-moz-ukraini-vid-20062022--1062-pro-organizaciju-nadannja-medichnoi-dopomogi-iz-zastosuvannjam-telemedicini-v-umovah-voennogo-stanu">–ù–∞–∫–∞–∑ –ú–û–ó –£–∫—Ä–∞—ó–Ω–∏ –≤—ñ–¥ 20.06.2022 ‚Ññ 1062 ¬´–ü—Ä–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é –Ω–∞–¥–∞–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ —ñ–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏ –≤ —É–º–æ–≤–∞—Ö –≤–æ—î–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É¬ª</a>
  
  4. <a href="https://zakon.rada.gov.ua/laws/show/z1155-22#Text">–ù–∞–∫–∞–∑ –ú–û–ó –≤—ñ–¥ 17.09.2022 ‚Ññ 1695 ¬´–ü—Ä–æ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ü–æ—Ä—è–¥–∫—É –Ω–∞–¥–∞–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ —ñ–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏, —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ–π–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ —ñ–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º —Ç–µ–ª–µ—Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó –Ω–∞ –ø–µ—Ä—ñ–æ–¥ –¥—ñ—ó –≤–æ—î–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≤ –£–∫—Ä–∞—ó–Ω—ñ –∞–±–æ –æ–∫—Ä–µ–º–∏—Ö —ó—ó –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—è—Ö¬ª</a>

  5. <a href = "https://zakon.rada.gov.ua/laws/show/3301-20#Text">–ó–ê–ö–û–ù –£–ö–†–ê–á–ù–ò –ü—Ä–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –¥–µ—è–∫–∏—Ö –∑–∞–∫–æ–Ω–æ–¥–∞–≤—á–∏—Ö –∞–∫—Ç—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏ —â–æ–¥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∏</a>
  `;

  await bot.sendMessage(msg.chat.id, infoMessage, { parse_mode: "HTML" });
}

async function createTrainingRequest(msg) {
  const questions = [
    "–Ø–∫ –¥–æ –í–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è? –í–∫–∞–∂—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ –ü–Ü–ë: ",
    "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –í–∞—à–æ–≥–æ –∑–∞–∫–ª–∞–¥—É –∞–±–æ –ö–æ–¥ –Ñ–î–†–ü–û–£.",
    "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
    "–ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ –≥–æ–¥–∏–Ω—É. –ö–æ–ª–∏ –í–∞–º –±—É–¥–µ –∑—Ä—É—á–Ω–æ —â–æ–± –º–∏ –∑ –í–∞–º–∏ –∑–≤'—è–∑–∞–ª–∏—Å—è?",
    "–Ü –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è. –ß–∏ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –∑ –í–∞–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è?",
  ];

  let answers = {};

  for (const question of questions) {
    await bot.sendChatAction(msg.chat.id, "typing");
    await bot.sendMessage(msg.chat.id, question);
    const response = await waitForReply(msg.chat.id);
    answers[question] = response.text;
  }

  // Optionally, you can save or process the collected answers here
  await saveToGoogleSheets(msg, answers);
}

async function saveToGoogleSheets(msg, data) {
  const payload = { data: data };
  await bot.sendChatAction(msg.chat.id, "typing");
  try {
    const response = await axios.post(googleAppsScriptUrl, payload);
    console.log("Data appended to Google Sheets:", response.data);

    // Send the application data back to the user
    let applicationMessage = "Your application details:\n\n";
    for (const [question, answer] of Object.entries(data)) {
      applicationMessage += `${question}: ${answer}\n`;
    }
    //   await bot.sendMessage(msg.chat.id, applicationMessage);
    await bot.sendMessage(
      msg.chat.id,
      "–î—è–∫—É—î–º–æ. –í–∞—à –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –í–∞–º–∏ –Ω–∞–∏ÃÜ–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    );
  } catch (error) {
    console.error("Error appending data to Google Sheets:", error);
    await bot.sendMessage(
      msg.chat.id,
      "Error saving application to Google Sheets."
    );
  }
}

// Function to wait for a reply from the user
function waitForReply(chatId) {
  return new Promise((resolve) => {
    bot.once("message", (msg) => {
      resolve(msg);
    });
  });
}
app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});


const port = process.env.PORT || 5000;
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

const webhookUrl = 'https://rgs-telegram-bot-b27a5d9c9991.herokuapp.com/webhook'; // Update with your deployed bot's URL
bot.setWebHook(`${webhookUrl}/bot${token}`);
